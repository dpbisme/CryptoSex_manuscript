---
title: "Asexual and Female Sort RNAseq"
author: "Elizabeth English"
date: "1/15/2019"
output:
  html_document: default
  pdf_document: default
  word_document: default
---

# R packages
**These are the R/bioconductor packages used for this analysis:**
```{r packages, message=FALSE, warning=FALSE, results='hide'}
library(dplyr)
library(readr)
library(Biostrings)
library(tximport)
library(genefilter)
library(tidyverse) 
library(RColorBrewer) 
library(reshape2) 
library(edgeR) 
library(limma)
library(gplots)
```

**This dynamic html summary report was compiled in Rmarkdown using the following packages:**
```{r packages.continued, results='hide', message=FALSE, warning=FALSE}
library(rmarkdown)
library(knitr) 
```

# Data generation
## read mapping with Kallisto
```{r read mapping, message=FALSE, warning=FALSE, eval=FALSE}

#First create a CryptoIndex using Kallisto index function (used Ensemble Crypto transcriptome)

kallisto index -i CryptoIndex Cryptosporidium_parvum_iowa_ii.ASM16534v1.cdna.all.fa

#Next use kallisto to align to the CryptoDBindex

kallisto quant -i CryptoIndex -o female_invitro1 -t 4 -b 60 --single -l 500 -s 100 9_S9_mergedLanes.fastq.gz
kallisto quant -i CryptoIndex -o female_invitro2 -t 4 -b 60 --single -l 500 -s 100 10_S10_mergedLanes.fastq.gz
kallisto quant -i CryptoIndex -o female_invitro3 -t 4 -b 60 --single -l 500 -s 100 11_S11_mergedLanes.fastq.gz
kallisto quant -i CryptoIndex -o female_invitro4 -t 4 -b 60 --single -l 500 -s 100 12_S12_mergedLanes.fastq.gz

kallisto quant -i CryptoIndex -o asexual_invitro1 -t 4 -b 60 --single -l 500 -s 100 3_S3_mergedLanes.fastq.gz
kallisto quant -i CryptoIndex -o asexual_invitro2 -t 4 -b 60 --single -l 500 -s 100 4_S4_mergedLanes.fastq.gz
kallisto quant -i CryptoIndex -o asexual_invitro3 -t 4 -b 60 --single -l 500 -s 100 5_S5_mergedLanes.fastq.gz
kallisto quant -i CryptoIndex -o asexual_invitro4 -t 4 -b 60 --single -l 500 -s 100 6_S6_mergedLanes.fastq.gz

kallisto quant -i CryptoIndex -o female_invivo1 -t 4 -b 60 --single -l 500 -s 100 13_S13_mergedLanes.fastq.gz
kallisto quant -i CryptoIndex -o female_invivo2 -t 4 -b 60 --single -l 500 -s 100 14_S14_mergedLanes.fastq.gz
kallisto quant -i CryptoIndex -o female_invivo3 -t 4 -b 60 --single -l 500 -s 100 15_S15_mergedLanes.fastq.gz
kallisto quant -i CryptoIndex -o female_invivo4 -t 4 -b 60 --single -l 500 -s 100 16_S16_mergedLanes.fastq.gz

```

## annotation with Ensembl
```{r annotation, message=FALSE, warning=FALSE, eval=FALSE}
#for crypto this information comes from a downloaded ena.tsv file because there is no EnsDB or biomaRt
cTx <-read_tsv("Cryptosporidium_parvum_iowa_ii.ASM16534v1.37.ena.tsv")
cTx <-as.data.frame(cTx)
cTx <- dplyr::rename(cTx, target_id = transcript_stable_id)
cTx <- dplyr::rename(cTx, gene_name = gene_stable_id)
cTx <- cTx[,c(4,3)]
head(cTx)
```

## importing data into R
```{r data import, message=FALSE, warning=FALSE, eval=FALSE}
targets <-read.table("StudyDesign.txt", row.names=NULL, header= T, as.is = T)
cfiles <- file.path(targets$sample, "abundance.h5")
all(file.exists(cfiles))

Txi_gene <-tximport(cfiles,
                    type = "kallisto",
                    tx2gene = cTx,
                    txOut = FALSE, #false collapses transcripts to genes
                    countsFromAbundance = "lengthScaledTPM")
 
save(Txi_gene, file = "Txi_gene")
```

# Preprocessing and normalization
## study design
```{r design, message=FALSE, warning=FALSE}
targets <-read.table("StudyDesign.txt", row.names=NULL, header= T, as.is = T)
sex <- targets$sex_stage
sex <- factor(sex)
origin <- targets$origin
origin <- factor(origin)
rep <- targets$rep
rep <- factor(rep)
group <- targets$group
group <- factor(group)

SampleLabels <- targets$sample
```

## raw data
```{r raw, message=FALSE, warning=FALSE}
load("Txi_gene")
DGElist <- DGEList(Txi_gene$counts)
# use the 'cpm' function from EdgeR to get counts per million
cpm <- cpm(DGElist) 
log2.cpm <- cpm(DGElist, log=TRUE)
log2.cpm.df <- as_tibble(log2.cpm)
colnames(log2.cpm.df) <- SampleLabels
log2.cpm.df <- melt(log2.cpm.df)
colnames(log2.cpm.df) <- c("sample", "expression")
ggplot(log2.cpm.df, aes(x=sample, y=expression, fill=sample)) +
  geom_violin(trim = TRUE, show.legend = TRUE) +
  stat_summary(fun.y = "median", geom = "point", shape = 95, size = 10, color = "black") +
  theme_bw()


```

## filtered data
```{r filtering, message=FALSE, warning=FALSE}
#first, take a look at how many genes or transcripts have no read counts at all
table(rowSums(DGElist$counts==0)==12)
# now set some cut-off to get rid of genes/transcripts with low counts
#set a cut-off to get rid of genes with low counts
keepers <- rowSums(cpm>1)>=4 #more than 1 count in at least 4 samples
DGElist.filtered <- DGElist[keepers,]
dim(DGElist.filtered)

log2.cpm.filtered <- cpm(DGElist.filtered, log=TRUE)
log2.cpm.filtered.df <- as_tibble(log2.cpm.filtered)
colnames(log2.cpm.filtered.df) <- SampleLabels
log2.cpm.filtered.df <- melt(log2.cpm.filtered.df)
colnames(log2.cpm.filtered.df) <- c("sample", "expression")
ggplot(log2.cpm.filtered.df, aes(x=sample, y=expression, fill=sample)) +
  geom_violin(trim = TRUE, show.legend = TRUE) +
  stat_summary(fun.y = "median", geom = "point", shape = 95, size = 10, color = "black") +
  theme_bw()
```

## normalized data
```{r normalize, message=FALSE, warning=FALSE}
DGElist.filtered.norm <- calcNormFactors(DGElist.filtered, method = "TMM")
# use the 'cpm' function from EdgeR to get counts per million from you 
log2.cpm.filtered.norm <- cpm(DGElist.filtered.norm, log=TRUE)
write.table(log2.cpm.filtered.norm,"norm_filtered.txt", quote = FALSE, sep = "\t")

log2.cpm.filtered.norm.df <- as_tibble(log2.cpm.filtered.norm)
colnames(log2.cpm.filtered.norm.df) <- SampleLabels
log2.cpm.filtered.norm.df <- melt(log2.cpm.filtered.norm.df)
colnames(log2.cpm.filtered.norm.df) <- c("sample", "expression")
ggplot(log2.cpm.filtered.norm.df, aes(x=sample, y=expression, fill=sample)) +
  geom_violin(trim = TRUE, show.legend = TRUE) +
  stat_summary(fun.y = "median", geom = "point", shape = 95, size = 10, color = "black") +
  theme_bw()

```

# Exploratory data analysis
## Principal component analysis (PCA) colored by sex
```{r PCA, message=FALSE, warning=FALSE}
pca.res <- prcomp(t(log2.cpm.filtered.norm), scale.=F, retx=T)
pc.var<- pca.res$sdev^2 
pc.per<- round(pc.var/sum(pc.var)*100, 1)
pc.per

pca.res.df <- as_tibble(pca.res$x)
ggplot(pca.res.df, aes(x=PC1, y=PC2, color=sex)) +
  geom_point(size=5) +
  theme(legend.position="right") 

```

## Principal component analysis (PCA) colored by origin
```{r PCA origin, message=FALSE, warning=FALSE}

pca.res.df <- as_tibble(pca.res$x)
ggplot(pca.res.df, aes(x=PC1, y=PC2, color=origin)) +
  geom_point(size=5) +
  theme(legend.position="right") 

```

## Principal component analysis (PCA) colored by group
```{r PCA group, message=FALSE, warning=FALSE}

pca.res.df <- as_tibble(pca.res$x)
ggplot(pca.res.df, aes(x=PC1, y=PC2, color=group)) +
  geom_point(size=5) +
  theme(legend.position="right") 

```

# Differential gene analysis
## set up model matrix
```{r model, message=FALSE, warning=FALSE}
group
targets <- read.table("StudyDesign.txt", row.names=NULL, header = T, as.is = T)
design <- model.matrix(~group)
design <- model.matrix(~0 + group)
colnames(design) <- levels(group)

```

## mean-variance and linear model
```{r linear model, message=FALSE, warning=FALSE}
v.DEGList.filtered.norm <- voom(DGElist.filtered.norm, design, plot = TRUE)

# fit a linear model to your data
```

## set up contrasts
```{r contrasts, message=FALSE, warning=FALSE}
fit <- lmFit(v.DEGList.filtered.norm, design)

contrast.matrix <- makeContrasts(femaleDevelinvitro = femaleinvitro - asexualinvitro,
                                 invivoVSinvitroFemale = femaleinvivo - femaleinvitro,
                                 levels=design)

```

## Bayesan stats
```{r Bayes, message=FALSE, warning=FALSE}
fits <- contrasts.fit(fit, contrast.matrix)
#get bayesian stats for your linear model fit
ebFit <- eBayes(fits)
#stats <- write.fit(ebFit)
```

## Volcano plot - in vitro female vs asexual
```{r volcano1, message=FALSE, warning=FALSE}
myTopHits1 <- topTable(ebFit, adjust ="BH", coef=1, number=4000, sort.by="logFC")
#first, move rownames into the dataframe
myTopHits1 <- rownames_to_column(myTopHits1, "geneID")


ggplot(myTopHits1, aes(y=-log10(adj.P.Val), x=logFC)) + geom_point(size=2) +
  theme_linedraw() +
  theme(axis.title = element_text(size = 19), panel.grid.major = element_blank(),
        panel.grid.minor = element_blank(), legend.text = element_text(size = 15),
        axis.text.x = element_text(size=14, colour = "black"),
        axis.text.y = element_text(size=14, colour = "black"),
        plot.title = element_text(size=20, colour = "black")) +
  ylim(-0.5,15) +
  xlim(-15,15) +
  geom_hline(yintercept = -log10(0.01), linetype="dashed", colour="grey", size=1) +
  geom_vline(xintercept = 1, linetype="dashed", colour="grey", size=1) +
  geom_vline(xintercept = -1, linetype="dashed", colour="grey", size=1) + 
  ggtitle("Asexual vs Female")
```

## Volcano plot - in vitro female vs asexual with highlighted genes of interest
```{r volcanocolored1, message=FALSE, warning=FALSE}
#Add grouped geneIDs to highlight specific genes on volcano plot
#oocyt wall proteins, potential oocyst wall proteins, tagged female genes from candidates
owp1 <- subset(myTopHits1, geneID== "cgd6_2090" | geneID== "cgd6_200" | geneID== "cgd4_3090" | 
                 geneID== "cgd7_5150" | geneID== "cgd4_670" | geneID== "cgd7_1800" |
                 geneID== "cgd8_3350" | geneID== "cgd4_500" | geneID== "cgd6_210")

powp1 <- subset(myTopHits1, geneID =="cgd2_490" | geneID == "cgd2_850" | geneID == "cgd3_1540" |
                  geneID == "cgd2_2510" | geneID == "cgd8_2670")

Ftagged1 <- subset(myTopHits1, geneID== "cgd7_4810" | geneID== "cgd7_5140")

#AP2 genes
AP2 <- subset(myTopHits1, geneID=="cgd4_1110" | geneID=="cgd8_3130" | geneID=="cgd8_3230" |
                geneID=="cgd1_3520" | geneID=="cgd2_3490" | geneID=="cgd4_3820" |
                geneID=="cgd4_600" | geneID=="cgd5_2570" |  geneID=="cgd5_4250" | 
                geneID=="cgd8_810" | geneID=="cgd4_2950" | geneID=="cgd6_2600" | 
                geneID=="cgd6_2670" | geneID=="cgd3_1980" | geneID=="cgd3_2970" | 
                geneID=="cgd6_1140" | geneID=="cgd6_5320" )

#cyclins and cyclin dependant kinases
cyclinsCDKs1 <- subset(myTopHits1, geneID =="cgd2_2290"| geneID =="cgd7_2490"| geneID =="cgd1_2320"|
                         geneID =="cgd1_3150"| geneID =="cgd1_3310"| geneID =="cgd3_4050"|
                         geneID =="cgd4_2070"| geneID =="cgd7_650"| geneID =="cgd7_660"|
                         geneID =="cgd7_1200"| geneID =="cgd7_4610"| geneID =="cgd4_243"|
                         geneID =="cgd8_2510"| geneID =="cgd1_60"| geneID =="cgd3_1510")

ggplot(myTopHits1, aes(y=-log10(adj.P.Val), x=logFC)) + geom_point(size=2) +
  geom_point(mapping =NULL, owp1, size = 2, colour= "red", inherit.aes = TRUE) +
  geom_point(mapping =NULL, Ftagged1, size = 2, colour= "red", inherit.aes = TRUE) +
  geom_point(mapping=NULL, powp1, size = 2, colour= "red", inherit.aes = TRUE) +
  geom_point(mapping=NULL, AP2, size = 2, colour= "blue", inherit.aes = TRUE) +
  geom_point(mapping=NULL, cyclinsCDKs1, size = 2, colour= "yellow", inherit.aes = TRUE) +
  theme_linedraw() +
  theme(axis.title = element_text(size = 19), panel.grid.major = element_blank(),
        panel.grid.minor = element_blank(), legend.text = element_text(size = 15),
        axis.text.x = element_text(size=14, colour = "black"),
        axis.text.y = element_text(size=14, colour = "black"),
        plot.title = element_text(size=20, colour = "black")) +
  ylim(-0.5,15) +
  xlim(-15,15) +
  geom_hline(yintercept = -log10(0.01), linetype="dashed", colour="grey", size=1) +
  geom_vline(xintercept = 1, linetype="dashed", colour="grey", size=1) +
  geom_vline(xintercept = -1, linetype="dashed", colour="grey", size=1) + 
  ggtitle("Asexual vs Female")
```

## Volcano plot - in vivo female vs in vitro female
```{r volcano2, message=FALSE, warning=FALSE}
myTopHits2 <- topTable(ebFit, adjust ="BH", coef=2, number=4000, sort.by="logFC")
#first, move rownames into the dataframe
myTopHits2 <- rownames_to_column(myTopHits2, "geneID")

ggplot(myTopHits2, aes(y=-log10(adj.P.Val), x=logFC)) + geom_point(size=2) +
  theme_linedraw() +
  theme(axis.title = element_text(size = 19), panel.grid.major = element_blank(),
        panel.grid.minor = element_blank(), legend.text = element_text(size = 15),
        axis.text.x = element_text(size=14, colour = "black"),
        axis.text.y = element_text(size=14, colour = "black"),
        plot.title = element_text(size=20, colour = "black")) +
  ylim(-0.5,15) +
  xlim(-15,15) +
  geom_hline(yintercept = -log10(0.01), linetype="dashed", colour="grey", size=1) +
  geom_vline(xintercept = 1, linetype="dashed", colour="grey", size=1) +
  geom_vline(xintercept = -1, linetype="dashed", colour="grey", size=1) + 
  ggtitle("Female in vivo vs in vitro")

```

## Volcano plot - iin vivo female vs in vitro female with highlighted genes of interest
```{r volcanocolored2, message=FALSE, warning=FALSE}
#Add grouped geneIDs to highlight specific genes on volcano plot
#oocyt wall proteins, potential oocyst wall proteins, tagged female genes from candidates
owp2 <- subset(myTopHits2, geneID== "cgd6_2090" | geneID== "cgd6_200" | geneID== "cgd4_3090" | 
                 geneID== "cgd7_5150" | geneID== "cgd4_670" | geneID== "cgd7_1800" |
                 geneID== "cgd8_3350" | geneID== "cgd4_500" | geneID== "cgd6_210")

powp2 <- subset(myTopHits2, geneID =="cgd2_490" | geneID == "cgd2_850" | geneID == "cgd3_1540" |
                  geneID == "cgd2_2510" | geneID == "cgd8_2670")

Ftagged2 <- subset(myTopHits2, geneID== "cgd7_4810" | geneID== "cgd7_5140")

#AP2 genes
AP22 <- subset(myTopHits2, geneID=="cgd4_1110" | geneID=="cgd8_3130" | geneID=="cgd8_3230" |
                geneID=="cgd1_3520" | geneID=="cgd2_3490" | geneID=="cgd4_3820" |
                geneID=="cgd4_600" | geneID=="cgd5_2570" |  geneID=="cgd5_4250" | 
                geneID=="cgd8_810" | geneID=="cgd4_2950" | geneID=="cgd6_2600" | 
                geneID=="cgd6_2670" | geneID=="cgd3_1980" | geneID=="cgd3_2970" | 
                geneID=="cgd6_1140" | geneID=="cgd6_5320" )

#cyclins and cyclin dependant kinases
cyclinsCDKs2 <- subset(myTopHits2, geneID =="cgd2_2290"| geneID =="cgd7_2490"| geneID =="cgd1_2320"|
                         geneID =="cgd1_3150"| geneID =="cgd1_3310"| geneID =="cgd3_4050"|
                         geneID =="cgd4_2070"| geneID =="cgd7_650"| geneID =="cgd7_660"|
                         geneID =="cgd7_1200"| geneID =="cgd7_4610"| geneID =="cgd4_243"|
                         geneID =="cgd8_2510"| geneID =="cgd1_60"| geneID =="cgd3_1510")

ggplot(myTopHits2, aes(y=-log10(adj.P.Val), x=logFC)) + geom_point(size=2) +
  geom_point(mapping =NULL, owp2, size = 2, colour= "red", inherit.aes = TRUE) +
  geom_point(mapping =NULL, Ftagged2, size = 2, colour= "red", inherit.aes = TRUE) +
  geom_point(mapping=NULL, powp2, size = 2, colour= "red", inherit.aes = TRUE) +
  geom_point(mapping=NULL, AP22, size = 2, colour= "blue", inherit.aes = TRUE) +
  geom_point(mapping=NULL, cyclinsCDKs2, size = 2, colour= "yellow", inherit.aes = TRUE) +
  theme_linedraw() +
  theme(axis.title = element_text(size = 19), panel.grid.major = element_blank(),
        panel.grid.minor = element_blank(), legend.text = element_text(size = 15),
        axis.text.x = element_text(size=14, colour = "black"),
        axis.text.y = element_text(size=14, colour = "black"),
        plot.title = element_text(size=20, colour = "black")) +
  ylim(-0.5,15) +
  xlim(-15,15) +
  geom_hline(yintercept = -log10(0.01), linetype="dashed", colour="grey", size=1) +
  geom_vline(xintercept = 1, linetype="dashed", colour="grey", size=1) +
  geom_vline(xintercept = -1, linetype="dashed", colour="grey", size=1) + 
  ggtitle("Asexual vs Female")
```

## Use desideTests to pull out DEG
```{r desidetests, message=FALSE, warning=FALSE}
results <- decideTests(ebFit, method="global", adjust.method="BH", p.value=0.01, lfc=1)
#look at what the results of a desideTests looks like
head(results)
summary(results)
```

## Generate lists of DEG
```{r DEGlists, message=FALSE, warning=FALSE}
#lists will be generated for: comparisons between asexual and female in vitro 
#and female in vitro vs in vivo
colnames(v.DEGList.filtered.norm$E) <- SampleLabels

DiffGenes1 <- v.DEGList.filtered.norm$E[results[,1] !=0,]
DiffGenes2 <- v.DEGList.filtered.norm$E[results[,2] !=0,]
DiffGenes <- v.DEGList.filtered.norm$E[results[,2] !=0 | results[,1] !=0,]

DiffGenesFile <- as_tibble(DiffGenes, rownames="geneSymbol")
DiffGenesFile <-  transform(DiffGenesFile,
        asexual_invitro.AVG = (asexual_invitro1 + asexual_invitro2 + asexual_invitro3 + asexual_invitro4)/4,
        female_invitro.AVG = (female_invitro1 + female_invitro2 + female_invitro3 + female_invitro4)/4,
        female_invivo.AVG = (female_invivo1 + female_invivo2 + female_invivo3 + female_invivo4)/4)
DiffGenesFile <- transform(DiffGenesFile,
        LogFC.FemaleVSAsexual = female_invitro.AVG - asexual_invitro.AVG,
        LogFC.invivoVSinvitro = female_invivo.AVG - female_invitro.AVG)
DiffGenesFile <- DiffGenesFile %>%
  dplyr::select(geneSymbol, 
        asexual_invitro1, asexual_invitro2, asexual_invitro3, asexual_invitro4, asexual_invitro.AVG,
        female_invitro1, female_invitro2, female_invitro3, female_invitro4, female_invitro.AVG,
        female_invivo1, female_invivo2, female_invivo3, female_invivo4, female_invivo.AVG,
        LogFC.FemaleVSAsexual, LogFC.invivoVSinvitro)
write.csv(DiffGenesFile, file="DiffGenesFile.csv")



FemaleDiffGenesFile <- as_tibble(DiffGenes1, rownames="geneSymbol")
FemaleDiffGenesFile <-  transform(FemaleDiffGenesFile,
        asexual_invitro.AVG = (asexual_invitro1 + asexual_invitro2 + asexual_invitro3 + asexual_invitro4)/4,
        female_invitro.AVG = (female_invitro1 + female_invitro2 + female_invitro3 + female_invitro4)/4)
FemaleDiffGenesFile <- transform(FemaleDiffGenesFile,
        LogFC.FemaleVSAsexual = female_invitro.AVG - asexual_invitro.AVG)
FemaleDiffGenesFile <- FemaleDiffGenesFile %>%
  dplyr::select(geneSymbol, 
        asexual_invitro1, asexual_invitro2, asexual_invitro3, asexual_invitro4, asexual_invitro.AVG,
        female_invitro1, female_invitro2, female_invitro3, female_invitro4, female_invitro.AVG, 
        LogFC.FemaleVSAsexual)
write.csv(FemaleDiffGenesFile, file="FemaleDiffGenesFile.csv")


invivoDiffGenesFile <- as_tibble(DiffGenes2, rownames="geneSymbol")
invivoDiffGenesFile <-  transform(invivoDiffGenesFile,
        female_invitro.AVG = (female_invitro1 + female_invitro2 + female_invitro3 + female_invitro4)/4,
        female_invivo.AVG = (female_invivo1 + female_invivo2 + female_invivo3 + female_invivo4)/4)
invivoDiffGenesFile <- transform(invivoDiffGenesFile,
        LogFC.invivoVSinvitro = female_invivo.AVG - female_invitro.AVG)
invivoDiffGenesFile <- invivoDiffGenesFile %>%
  dplyr::select(geneSymbol,
        female_invitro1, female_invitro2, female_invitro3, female_invitro4, female_invitro.AVG,
        female_invivo1, female_invivo2, female_invivo3, female_invivo4, female_invivo.AVG, 
        LogFC.invivoVSinvitro)
write.csv(invivoDiffGenesFile, file="invivoDiffGenesFile.csv")

```

## Heatmaping- Based on all contrasts
```{r heatmap1, message=FALSE, warning=FALSE}
myheatcol <-colorRampPalette(colors=c("blue","white", "red"))(100)
clustRows <- hclust(as.dist(1-cor(t(DiffGenes), method="pearson")), method="complete")
clustColumns <- hclust(as.dist(1-cor(DiffGenes, method="spearman")), method="complete")
clust.assign <- cutree(clustRows, k=10
                )

module.color <- rainbow(length(unique(clust.assign)), start=0.1, end=0.9) 
module.color <- module.color[as.vector(clust.assign)] 

heatmap.2(DiffGenes, 
          Rowv=as.dendrogram(clustRows), 
          Colv=NA,
          RowSideColors=module.color,
          col=myheatcol, scale='row', labRow=NA,
          density.info="none", trace="none",  
          cexRow=1, cexCol=1) 

names(module.color) <- names(clust.assign) 
barplot(rep(10, max(clust.assign)),
        col=unique(module.color[clustRows$labels[clustRows$order]]), 
        horiz=T, names=unique(clust.assign[clustRows$order]))
```

## Heatmaping- Cluster heatmaps
```{r heatmap2, message=FALSE, warning=FALSE}
# Create heatmap for chosen sub-cluster 1----
cluster1 <- 1 #use c function to grab more than one cluster from the heatmap.  e.g., c(1,2)
mycluster1 <- DiffGenes[names(clust.assign[clust.assign%in%cluster1]),] 
hrsub1 <- hclust(as.dist(1-cor(t(mycluster1), method="pearson")), method="complete") 
clusterIDs1 <- data.frame(Labels=rev(hrsub1$labels[hrsub1$order]))
clusterIDs1 <- as.vector(t(clust.assign))


heatmap.2(mycluster1, 
          Rowv=as.dendrogram(hrsub1), 
          Colv = NA,
          col=myheatcol, scale="row", 
          density.info="none", trace="none", margins = c(8,8),
          RowSideColors=module.color[clust.assign%in%cluster1]) 

clusterSymbols1 <- data.frame(Labels=rev(hrsub1$labels[hrsub1$order]))
clusterSymbols1 <- as.vector(t(clusterSymbols1))
clusterData1 <- DiffGenes[clusterSymbols1,]
clusterData1.df <- as_tibble(clusterData1, rownames = "geneSymbol")
write_csv(clusterData1.df,"Cluster1.csv")

# Create heatmap for chosen sub-cluster 2----
cluster2 <- 2 #use c function to grab more than one cluster from the heatmap.  e.g., c(1,2)
mycluster2 <- DiffGenes[names(clust.assign[clust.assign%in%cluster2]),] 
hrsub2 <- hclust(as.dist(1-cor(t(mycluster2), method="pearson")), method="complete") 
clusterIDs2 <- data.frame(Labels=rev(hrsub2$labels[hrsub2$order]))
clusterIDs2 <- as.vector(t(clust.assign))

# Create heatmap for chosen sub-cluster.
heatmap.2(mycluster2, 
          Rowv=as.dendrogram(hrsub2), 
          Colv = NA,
          col=myheatcol, scale="row", 
          density.info="none", trace="none", margins = c(8,8),
          RowSideColors=module.color[clust.assign%in%cluster2]) 

clusterSymbols2 <- data.frame(Labels=rev(hrsub2$labels[hrsub2$order]))
clusterSymbols2 <- as.vector(t(clusterSymbols2))
clusterData2 <- DiffGenes[clusterSymbols2,]
clusterData2.df <- as_tibble(clusterData2, rownames = "geneSymbol")
write_csv(clusterData2.df,"Cluster2.csv")

# Create heatmap for chosen sub-cluster 3----
cluster3 <- 3 #use c function to grab more than one cluster from the heatmap.  e.g., c(1,2)
mycluster3 <- DiffGenes[names(clust.assign[clust.assign%in%cluster3]),] 
hrsub3 <- hclust(as.dist(1-cor(t(mycluster3), method="pearson")), method="complete") 
clusterIDs3 <- data.frame(Labels=rev(hrsub3$labels[hrsub3$order]))
clusterIDs3 <- as.vector(t(clust.assign))

# Create heatmap for chosen sub-cluster.
heatmap.2(mycluster3, 
          Rowv=as.dendrogram(hrsub3), 
          Colv = NA,
          col=myheatcol, scale="row", 
          density.info="none", trace="none", margins = c(8,8),
          RowSideColors=module.color[clust.assign%in%cluster3]) 

clusterSymbols3 <- data.frame(Labels=rev(hrsub3$labels[hrsub3$order]))
clusterSymbols3 <- as.vector(t(clusterSymbols3))
clusterData3 <- DiffGenes[clusterSymbols3,]
clusterData3.df <- as_tibble(clusterData3, rownames = "geneSymbol")
write_csv(clusterData3.df,"Cluster3.csv")

# Create heatmap for chosen sub-cluster 4----

cluster4 <- 4 #use c function to grab more than one cluster from the heatmap.  e.g., c(1,2)
mycluster4 <- DiffGenes[names(clust.assign[clust.assign%in%cluster4]),] 
hrsub4 <- hclust(as.dist(1-cor(t(mycluster4), method="pearson")), method="complete") 
clusterIDs4 <- data.frame(Labels=rev(hrsub4$labels[hrsub4$order]))
clusterIDs4 <- as.vector(t(clust.assign))

# Create heatmap for chosen sub-cluster.
heatmap.2(mycluster4, 
          Rowv=as.dendrogram(hrsub4), 
          Colv = NA,
          col=myheatcol, scale="row", 
          density.info="none", trace="none", margins = c(8,8),
          RowSideColors=module.color[clust.assign%in%cluster4]) 

clusterSymbols4 <- data.frame(Labels=rev(hrsub4$labels[hrsub4$order]))
clusterSymbols4 <- as.vector(t(clusterSymbols4))
clusterData4 <- DiffGenes[clusterSymbols4,]
clusterData4.df <- as_tibble(clusterData4, rownames = "geneSymbol")
write_csv(clusterData4.df,"Cluster4.csv")

# Create heatmap for chosen sub-cluster 5----
cluster5 <- 5 #use c function to grab more than one cluster from the heatmap.  e.g., c(1,2)
mycluster5 <- DiffGenes[names(clust.assign[clust.assign%in%cluster5]),] 
hrsub5 <- hclust(as.dist(1-cor(t(mycluster5), method="pearson")), method="complete") 
clusterIDs5 <- data.frame(Labels=rev(hrsub5$labels[hrsub5$order]))
clusterIDs5 <- as.vector(t(clust.assign))

# Create heatmap for chosen sub-cluster.
heatmap.2(mycluster5, 
          Rowv=as.dendrogram(hrsub5), 
          Colv = NA,
          col=myheatcol, scale="row", 
          density.info="none", trace="none", margins = c(8,8),
          RowSideColors=module.color[clust.assign%in%cluster5]) 

clusterSymbols5 <- data.frame(Labels=rev(hrsub5$labels[hrsub5$order]))
clusterSymbols5 <- as.vector(t(clusterSymbols5))
clusterData5 <- DiffGenes[clusterSymbols5,]
clusterData5.df <- as_tibble(clusterData5, rownames = "geneSymbol")
write_csv(clusterData5.df,"Cluster5.csv")

# Create heatmap for chosen sub-cluster 6----
cluster6 <- 6 #use c function to grab more than one cluster from the heatmap.  e.g., c(1,2)
mycluster6 <- DiffGenes[names(clust.assign[clust.assign%in%cluster6]),] 
hrsub6 <- hclust(as.dist(1-cor(t(mycluster6), method="pearson")), method="complete") 
clusterIDs6 <- data.frame(Labels=rev(hrsub6$labels[hrsub6$order]))
clusterIDs6 <- as.vector(t(clust.assign))

# Create heatmap for chosen sub-cluster.
heatmap.2(mycluster6, 
          Rowv=as.dendrogram(hrsub6), 
          Colv = NA,
          col=myheatcol, scale="row", 
          density.info="none", trace="none", margins = c(8,8),
          RowSideColors=module.color[clust.assign%in%cluster6]) 

clusterSymbols6 <- data.frame(Labels=rev(hrsub6$labels[hrsub6$order]))
clusterSymbols6 <- as.vector(t(clusterSymbols6))
clusterData6 <- DiffGenes[clusterSymbols6,]
clusterData6.df <- as_tibble(clusterData6, rownames = "geneSymbol")
write_csv(clusterData6.df,"Cluster6.csv")

# Create heatmap for chosen sub-cluster 7----
cluster7 <- 7 #use c function to grab more than one cluster from the heatmap.  e.g., c(1,2)
mycluster7 <- DiffGenes[names(clust.assign[clust.assign%in%cluster7]),] 
hrsub7 <- hclust(as.dist(1-cor(t(mycluster7), method="pearson")), method="complete") 
clusterIDs7 <- data.frame(Labels=rev(hrsub7$labels[hrsub7$order]))
clusterIDs7 <- as.vector(t(clust.assign))

# Create heatmap for chosen sub-cluster.
heatmap.2(mycluster7, 
          Rowv=as.dendrogram(hrsub7), 
          Colv = NA,
          col=myheatcol, scale="row", 
          density.info="none", trace="none", margins = c(8,8),
          RowSideColors=module.color[clust.assign%in%cluster7]) 

clusterSymbols7 <- data.frame(Labels=rev(hrsub7$labels[hrsub7$order]))
clusterSymbols7 <- as.vector(t(clusterSymbols7))
clusterData7 <- DiffGenes[clusterSymbols7,]
clusterData7.df <- as_tibble(clusterData7, rownames = "geneSymbol")
write_csv(clusterData7.df,"Cluster7.csv")

# Create heatmap for chosen sub-cluster 8----
cluster8 <- 8 #use c function to grab more than one cluster from the heatmap.  e.g., c(1,2)
mycluster8 <- DiffGenes[names(clust.assign[clust.assign%in%cluster8]),] 
hrsub8 <- hclust(as.dist(1-cor(t(mycluster8), method="pearson")), method="complete") 
clusterIDs8 <- data.frame(Labels=rev(hrsub8$labels[hrsub8$order]))
clusterIDs8 <- as.vector(t(clust.assign))

# Create heatmap for chosen sub-cluster.
heatmap.2(mycluster8, 
          Rowv=as.dendrogram(hrsub8), 
          Colv = NA,
          col=myheatcol, scale="row", 
          density.info="none", trace="none", margins = c(8,8),
          RowSideColors=module.color[clust.assign%in%cluster8]) 

clusterSymbols8 <- data.frame(Labels=rev(hrsub8$labels[hrsub8$order]))
clusterSymbols8 <- as.vector(t(clusterSymbols8))
clusterData8 <- DiffGenes[clusterSymbols8,]
clusterData8.df <- as_tibble(clusterData8, rownames = "geneSymbol")
write_csv(clusterData8.df,"Cluster8.csv")

# Create heatmap for chosen sub-cluster 9----
cluster9 <- 9 #use c function to grab more than one cluster from the heatmap.  e.g., c(1,2)
mycluster9 <- DiffGenes[names(clust.assign[clust.assign%in%cluster9]),] 
hrsub9 <- hclust(as.dist(1-cor(t(mycluster9), method="pearson")), method="complete") 
clusterIDs9 <- data.frame(Labels=rev(hrsub9$labels[hrsub9$order]))
clusterIDs9 <- as.vector(t(clust.assign))

# Create heatmap for chosen sub-cluster.
heatmap.2(mycluster9, 
          Rowv=as.dendrogram(hrsub9), 
          Colv = NA,
          col=myheatcol, scale="row", 
          density.info="none", trace="none", margins = c(8,8),
          RowSideColors=module.color[clust.assign%in%cluster9]) 

clusterSymbols9 <- data.frame(Labels=rev(hrsub9$labels[hrsub9$order]))
clusterSymbols9 <- as.vector(t(clusterSymbols9))
clusterData9 <- DiffGenes[clusterSymbols9,]
clusterData9.df <- as_tibble(clusterData9, rownames = "geneSymbol")
write_csv(clusterData9.df,"Cluster9.csv")

# Create heatmap for chosen sub-cluster 10----
cluster10 <- 10 #use c function to grab more than one cluster from the heatmap.  e.g., c(1,2)
mycluster10 <- DiffGenes[names(clust.assign[clust.assign%in%cluster10]),] 
hrsub10 <- hclust(as.dist(1-cor(t(mycluster10), method="pearson")), method="complete") 
clusterIDs10 <- data.frame(Labels=rev(hrsub10$labels[hrsub10$order]))
clusterIDs10 <- as.vector(t(clust.assign))

# Create heatmap for chosen sub-cluster.
heatmap.2(mycluster10, 
          Rowv=as.dendrogram(hrsub10), 
          Colv = NA,
          col=myheatcol, scale="row", 
          density.info="none", trace="none", margins = c(8,8), 
          RowSideColors=module.color[clust.assign%in%cluster10]) 

clusterSymbols10 <- data.frame(Labels=rev(hrsub10$labels[hrsub10$order]))
clusterSymbols10 <- as.vector(t(clusterSymbols10))
clusterData10 <- DiffGenes[clusterSymbols10,]
clusterData10.df <- as_tibble(clusterData10, rownames = "geneSymbol")
write_csv(clusterData10.df,"Cluster10.csv")
```

## Heatmaping- Selected genes with related functions
```{r heatmap3, message=FALSE, warning=FALSE}
#to make heatmap for select list of genes----
colnames(log2.cpm.filtered.norm) <-SampleLabels

#AP2 heatmap ----

myAP2 <- as_tibble(v.DEGList.filtered.norm$E, rownames = "geneSymbol") %>%
  dplyr::filter(geneSymbol=="cgd4_1110" | geneSymbol=="cgd8_3130" | 
                geneSymbol=="cgd8_3230" |geneSymbol=="cgd1_3520" | 
                  geneSymbol=="cgd2_3490" | geneSymbol=="cgd4_3820" |
                  geneSymbol=="cgd4_600" | geneSymbol=="cgd5_2570" | geneSymbol=="cgd5_4250" | 
                  geneSymbol=="cgd8_810" | geneSymbol=="cgd4_2950" |
                  geneSymbol=="cgd6_2600" | geneSymbol=="cgd6_2670" | geneSymbol=="cgd3_1980" |
                  geneSymbol=="cgd3_2970" | geneSymbol=="cgd6_1140" | geneSymbol=="cgd6_5320") %>%
  dplyr::select(geneSymbol,asexual_invitro1, asexual_invitro2, asexual_invitro3, asexual_invitro4,
                female_invitro1, female_invitro2, female_invitro3, female_invitro4,
                female_invivo1, female_invivo2, female_invivo3, female_invivo4)

myAP2 <-column_to_rownames(myAP2, var="geneSymbol")
myAP2.matrix <- data.matrix(myAP2)

hrAP2 <- hclust(as.dist(1-cor(t(myAP2.matrix), method="pearson")), method="complete") #cluster rows by pearson correlation

heatmap.2(myAP2.matrix, Rowv=as.dendrogram(hrAP2), Colv=NA, 
          col=myheatcol, scale="row", density.info="none", 
          trace="none", 
          cexRow=1.5, cexCol=1, margins = c(8,8), breaks=seq(-2.5,2.5, length.out = 101))

#meiosis and dna repair heatmap ----
myMeiosis <- as_tibble(v.DEGList.filtered.norm$E, rownames = "geneSymbol") %>%
  dplyr::filter(geneSymbol=="cgd7_1690"| geneSymbol=="cgd6_4420"| 
                geneSymbol=="cgd8_1350"| geneSymbol=="cgd2_510" | 
                geneSymbol=="cgd1_1420"| geneSymbol=="cgd1_60" |
                geneSymbol=="cgd3_4050"| geneSymbol=="cgd5_2790"|
                geneSymbol=="cgd4_2860"| geneSymbol=="cgd1_1180"|
                geneSymbol=="cgd8_610"| geneSymbol=="cgd7_2370"|
                geneSymbol=="cgd8_1620"| geneSymbol=="cgd3_3860"|
                geneSymbol=="cgd7_4620"| geneSymbol=="cgd3_4290"|
                geneSymbol=="cgd7_2700"| geneSymbol=="cgd7_2310"|
                geneSymbol=="cgd7_1850"| geneSymbol=="cgd8_490"|
                geneSymbol=="cgd6_4140"| geneSymbol=="cgd1_330"|
                geneSymbol=="cgd1_1330"| geneSymbol=="cgd3_2210"|
                geneSymbol=="cgd8_1410"| geneSymbol=="cgd6_4760"|
                geneSymbol=="cgd1_3670"| geneSymbol=="cgd5_2560"|
                geneSymbol=="cgd2_2750"| geneSymbol=="cgd2_2500"|
                geneSymbol=="cgd3_3820" | geneSymbol=="cgd5_1750") %>%
  dplyr::select(geneSymbol,asexual_invitro1, asexual_invitro2, asexual_invitro3, asexual_invitro4,
                female_invitro1, female_invitro2, female_invitro3, female_invitro4,
                female_invivo1, female_invivo2, female_invivo3, female_invivo4)

myMeiosis <-column_to_rownames(myMeiosis, var="geneSymbol")
myMeiosis.matrix <- data.matrix(myMeiosis)

hrMei <- hclust(as.dist(1-cor(t(myMeiosis.matrix), method="pearson")), method="complete") #cluster rows by pearson correlation

heatmap.2(myMeiosis.matrix, Rowv=as.dendrogram(hrMei), Colv=NA, 
          col=myheatcol, scale="row", density.info="none", 
          trace="none", 
          cexRow=1.5, cexCol=1, margins = c(8,8), breaks=seq(-2.5,2.5, length.out = 101))

#Amylopectin heatmap ----
myAMY <- as_tibble(v.DEGList.filtered.norm$E, rownames = "geneSymbol") %>%
  dplyr::filter(geneSymbol=="cgd6_3750" |
                  geneSymbol=="cgd5_2910" |
                  geneSymbol=="cgd3_1580" |
                  geneSymbol=="cgd2_3270" |
                  geneSymbol=="cgd2_3260" |
                  geneSymbol=="cgd2_2340" |
                  geneSymbol=="cgd4_2600" |
                  geneSymbol=="cgd6_2450" |
                  geneSymbol=="cgd6_3280" |
                  geneSymbol=="cgd8_4940" |
                  geneSymbol=="cgd6_880" |
                  geneSymbol=="cgd7_1830" |
                  geneSymbol=="cgd7_910" |
                  geneSymbol=="cgd1_3020" |
                  geneSymbol=="cgd6_3790" |
                  geneSymbol=="cgd6_3800" |
                  geneSymbol=="cgd1_2040" |
                  geneSymbol=="cgd1_3040" ) %>%
  dplyr::select(geneSymbol,asexual_invitro1, asexual_invitro2, asexual_invitro3, asexual_invitro4,
                female_invitro1, female_invitro2, female_invitro3, female_invitro4,
                female_invivo1, female_invivo2, female_invivo3, female_invivo4)

myAMY <-column_to_rownames(myAMY, var="geneSymbol")
myAMY.matrix <- data.matrix(myAMY)


hrAMY <- hclust(as.dist(1-cor(t(myAMY.matrix), method="pearson")), method="complete") #cluster rows by pearson correlation

heatmap.2(myAMY.matrix, Rowv=as.dendrogram(hrAMY), Colv=NA, 
          col=myheatcol, scale="row", density.info="none", 
          trace="none", 
          cexRow=1.5, cexCol=1, margins = c(8,8), breaks=seq(-2.5,2.5, length.out = 101))


#Fatty Acid PKS heatmap ----
PKS <- as_tibble(v.DEGList.filtered.norm$E, rownames = "geneSymbol") %>%
  dplyr::filter(geneSymbol=="cgd3_2870" |
                  geneSymbol=="cgd8_3680" |
                  geneSymbol=="cgd1_3710" |
                  geneSymbol=="cgd3_2180" |
                  geneSymbol=="cgd8_2390" |
                  geneSymbol=="cgd4_4340" |
                  geneSymbol=="cgd8_1400" |
                  geneSymbol=="cgd1_1110" |
                  geneSymbol=="cgd4_2900" ) %>%
  dplyr::select(geneSymbol,asexual_invitro1, asexual_invitro2, asexual_invitro3, asexual_invitro4,
                female_invitro1, female_invitro2, female_invitro3, female_invitro4,
                female_invivo1, female_invivo2, female_invivo3, female_invivo4)

PKS <-column_to_rownames(PKS, var="geneSymbol")
PKS.matrix <- data.matrix(PKS)


PKShr <- hclust(as.dist(1-cor(t(PKS.matrix), method="pearson")), method="complete") #cluster rows by pearson correlation

heatmap.2(PKS.matrix, Rowv=as.dendrogram(PKShr), Colv=NA, 
          col=myheatcol, scale="row", density.info="none", 
          trace="none", 
          cexRow=1.5, cexCol=1, margins = c(8,8), breaks=seq(-2.5,2.5, length.out = 101))

#Protease heatmap ----
Protease <- as_tibble(v.DEGList.filtered.norm$E, rownames = "geneSymbol") %>%
  dplyr::filter(geneSymbol=="cgd5_2600" |
                  geneSymbol=="cgd3_680" |
                  geneSymbol=="cgd3_3610" |
                  geneSymbol=="cgd1_3550" |
                  geneSymbol=="cgd2_1590" |
                  geneSymbol=="cgd6_3820" |
                  geneSymbol=="cgd5_3940" |
                  geneSymbol=="cgd1_370" |
                  geneSymbol=="cgd6_4880" |
                  geneSymbol=="cgd1_1680" |
                  geneSymbol=="cgd2_2760" |
                  geneSymbol=="cgd3_520" |
                  geneSymbol=="cgd2_3320" |
                  geneSymbol=="cgd4_2110" |
                  geneSymbol=="cgd5_2500" |
                  geneSymbol=="cgd6_900" |
                  geneSymbol=="cgd5_2660" |
                  geneSymbol=="cgd2_920" |
                  geneSymbol=="cgd5_4370" |
                  geneSymbol=="cgd3_4200" |
                  geneSymbol=="cgd6_4080" |
                  geneSymbol=="cgd6_3730" |
                  geneSymbol=="cgd1_740" |
                  geneSymbol=="cgd7_4730" |
                  geneSymbol=="cgd1_1100" |
                  geneSymbol=="cgd6_4840" |
                  geneSymbol=="cgd2_3660" |
                  geneSymbol=="cgd4_2190"  ) %>%
  dplyr::select(geneSymbol,asexual_invitro1, asexual_invitro2, asexual_invitro3, asexual_invitro4,
                female_invitro1, female_invitro2, female_invitro3, female_invitro4,
                female_invivo1, female_invivo2, female_invivo3, female_invivo4)

Protease <-column_to_rownames(Protease, var="geneSymbol")
Protease.matrix <- data.matrix(Protease)


hrPro <- hclust(as.dist(1-cor(t(Protease.matrix), method="pearson")), method="complete") #cluster rows by pearson correlation

heatmap.2(Protease.matrix, Rowv=as.dendrogram(hrPro), Colv=NA, 
          col=myheatcol, scale="row", density.info="none", 
          trace="none", 
          cexRow=1.5, cexCol=1, margins = c(8,8), breaks=seq(-2.5,2.5, length.out = 101))


#Oxidoreductase heatmap ----
Oxi <- as_tibble(v.DEGList.filtered.norm$E, rownames = "geneSymbol") %>%
  dplyr::filter(geneSymbol=="cgd8_1700" |
                  geneSymbol=="cgd7_270" |
                  geneSymbol=="cgd8_1720" |
                  geneSymbol=="cgd4_4460" |
                  geneSymbol=="cgd7_1000" |
                  geneSymbol=="cgd8_4230" |
                  geneSymbol=="cgd3_460" |
                  geneSymbol=="cgd2_210" |
                  geneSymbol=="cgd5_3230" |
                  geneSymbol=="cgd6_3720" |
                  geneSymbol=="cgd4_690" |
                  geneSymbol=="cgd6_1950" |
                  geneSymbol=="cgd1_280" |
                  geneSymbol=="cgd6_2470" |
                  geneSymbol=="cgd3_3430" ) %>%
  dplyr::select(geneSymbol,asexual_invitro1, asexual_invitro2, asexual_invitro3, asexual_invitro4,
                female_invitro1, female_invitro2, female_invitro3, female_invitro4,
                female_invivo1, female_invivo2, female_invivo3, female_invivo4)

Oxi <-column_to_rownames(Oxi, var="geneSymbol")
Oxi.matrix <- data.matrix(Oxi)


hrOxi <- hclust(as.dist(1-cor(t(Oxi.matrix), method="pearson")), method="complete") #cluster rows by pearson correlation

heatmap.2(Oxi.matrix, Rowv=as.dendrogram(hrOxi), Colv=NA, 
          col=myheatcol, scale="row", density.info="none", 
          trace="none", 
          cexRow=1.5, cexCol=1, margins = c(8,8), breaks=seq(-2.5,2.5, length.out = 101))

#Glycoslyation heatmap ----
Glycos <- as_tibble(v.DEGList.filtered.norm$E, rownames = "geneSymbol") %>%
  dplyr::filter(geneSymbol=="cgd5_690" |
                  geneSymbol=="cgd5_3140" |
                  geneSymbol=="cgd5_2590" |
                  geneSymbol=="cgd5_790" |
                  geneSymbol=="cgd1_3720" |
                  geneSymbol=="cgd1_3730" |
                  geneSymbol=="cgd3_3590" |
                  geneSymbol=="cgd8_920" ) %>%
  dplyr::select(geneSymbol,asexual_invitro1, asexual_invitro2, asexual_invitro3, asexual_invitro4,
                female_invitro1, female_invitro2, female_invitro3, female_invitro4,
                female_invivo1, female_invivo2, female_invivo3, female_invivo4)

Glycos <-column_to_rownames(Glycos, var="geneSymbol")
Glycos.matrix <- data.matrix(Glycos)


hrGly <- hclust(as.dist(1-cor(t(Glycos.matrix), method="pearson")), method="complete") #cluster rows by pearson correlation

heatmap.2(Glycos.matrix, Rowv=as.dendrogram(hrGly), Colv=NA, 
          col=myheatcol, scale="row", density.info="none", 
          trace="none", 
          cexRow=1.5, cexCol=1, margins = c(8,8), breaks=seq(-2.5,2.5, length.out = 101))

#Polysaccharide pyruvyl transferases heatmap ----
pyruv <- as_tibble(v.DEGList.filtered.norm$E, rownames = "geneSymbol") %>%
  dplyr::filter(geneSymbol=="cgd7_2580" |
                  geneSymbol=="cgd6_1450" ) %>%
  dplyr::select(geneSymbol,asexual_invitro1, asexual_invitro2, asexual_invitro3, asexual_invitro4,
                female_invitro1, female_invitro2, female_invitro3, female_invitro4,
                female_invivo1, female_invivo2, female_invivo3, female_invivo4)

pyruv <-column_to_rownames(pyruv, var="geneSymbol")
pyruv.matrix <- data.matrix(pyruv)


hrPyr <- hclust(as.dist(1-cor(t(pyruv.matrix), method="pearson")), method="complete") #cluster rows by pearson correlation

heatmap.2(pyruv.matrix, Rowv=NA, Colv=NA, 
          col=myheatcol, scale="row", density.info="none", 
          trace="none", 
          cexRow=1.5, cexCol=1, margins = c(8,8), breaks=seq(-2.5,2.5, length.out = 101))

#Oocyst Wall Proteins

Owpx <- as_tibble(v.DEGList.filtered.norm$E, rownames = "geneSymbol") %>%
  dplyr::filter(geneSymbol== "cgd6_2090" |
                  geneSymbol== "cgd6_200" | 
                  geneSymbol== "cgd4_3090" | 
                  geneSymbol== "cgd7_5150" |
                  geneSymbol== "cgd4_670" |
                  geneSymbol== "cgd7_1800" |
                  geneSymbol== "cgd8_3350" |
                  geneSymbol== "cgd4_500" |
                  geneSymbol== "cgd6_210") %>%
  dplyr::select(geneSymbol,asexual_invitro1, asexual_invitro2, asexual_invitro3, asexual_invitro4,
                female_invitro1, female_invitro2, female_invitro3, female_invitro4,
                female_invivo1, female_invivo2, female_invivo3, female_invivo4)

Owpx <-column_to_rownames(Owpx, var="geneSymbol")
Owpx.matrix <- data.matrix(Owpx)

Owxphr <- hclust(as.dist(1-cor(t(Owpx.matrix), method="pearson")), method="complete") #cluster rows by pearson correlation

heatmap.2(Owpx.matrix, Rowv=as.dendrogram(Owxphr), Colv=NA, 
          col=myheatcol, scale="row", density.info="none", 
          trace="none", 
          cexRow=1.5, cexCol=1, margins = c(8,8), breaks=seq(-2.5,2.5, length.out = 101))
```
