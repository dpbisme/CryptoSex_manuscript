Rowv=as.dendrogram(clustRows2),
Colv=NA,
RowSideColors=module.color2,
col=myheatcol, scale='row',
labRow=NA, key = 1,
density.info="none", trace="none",
margins = c(10,25),
dendrogram="none",
cexRow=1, cexCol=0.75)
clust.assign2 <- cutree(clustRows2, k=4)
module.color2 <- rainbow(length(unique(clust.assign2)), start=0.1, end=0.9)
module.color2 <- module.color2[as.vector(clust.assign2)]
# plotting heatmap
heatmap.2(DiffGenes2,
Rowv=as.dendrogram(clustRows2),
Colv=NA,
RowSideColors=module.color2,
col=myheatcol, scale='row',
labRow=NA, key = 1,
density.info="none", trace="none",
margins = c(10,25),
dendrogram="none",
cexRow=1, cexCol=0.75)
clust.assign2 <- cutree(clustRows2, k=5)
module.color2 <- rainbow(length(unique(clust.assign2)), start=0.1, end=0.9)
module.color2 <- module.color2[as.vector(clust.assign2)]
# plotting heatmap
heatmap.2(DiffGenes2,
Rowv=as.dendrogram(clustRows2),
Colv=NA,
RowSideColors=module.color2,
col=myheatcol, scale='row',
labRow=NA, key = 1,
density.info="none", trace="none",
margins = c(10,25),
dendrogram="none",
cexRow=1, cexCol=0.75)
clustRows2 <- hclust(as.dist(1-cor(t(DiffGenes2), method="pearson")), method="complete")
module.color2 <- rainbow(length(unique(clust.assign2)), start=0.1, end=0.9)
module.color2 <- module.color2[as.vector(clust.assign2)]
# plotting heatmap
heatmap.2(DiffGenes2,
Rowv=as.dendrogram(clustRows2),
Colv=NA,
RowSideColors=module.color2,
col=myheatcol, scale='row',
labRow=NA, key = 1,
density.info="none", trace="none",
margins = c(10,25),
dendrogram="none",
cexRow=1, cexCol=0.75)
# pulling these genes out along with their expression data
DiffGenes2 <- v.myDGEList.filtered.norm2$E[results2[,1] !=0 | results2[,2] !=0,]
clustRows2 <- hclust(as.dist(1-cor(t(DiffGenes2), method="pearson")), method="complete")
clustColumns2 <- hclust(as.dist(1-cor(DiffGenes2, method="spearman")), method="complete")
clust.assign2 <- cutree(clustRows2, k=5)
module.color2 <- rainbow(length(unique(clust.assign2)), start=0.1, end=0.9)
module.color2 <- module.color2[as.vector(clust.assign2)]
# plotting heatmap
heatmap.2(DiffGenes2,
Rowv=as.dendrogram(clustRows2),
Colv=NA,
RowSideColors=module.color2,
col=myheatcol, scale='row',
labRow=NA, key = 1,
density.info="none", trace="none",
margins = c(10,25),
dendrogram="none",
cexRow=1, cexCol=0.75)
clustRows2 <- hclust(as.dist(1-cor(t(DiffGenes2), method="pearson")), method="average")
clustColumns2 <- hclust(as.dist(1-cor(DiffGenes2, method="spearman")), method="complete")
clust.assign2 <- cutree(clustRows2, k=5)
module.color2 <- rainbow(length(unique(clust.assign2)), start=0.1, end=0.9)
module.color2 <- module.color2[as.vector(clust.assign2)]
# plotting heatmap
heatmap.2(DiffGenes2,
Rowv=as.dendrogram(clustRows2),
Colv=NA,
RowSideColors=module.color2,
col=myheatcol, scale='row',
labRow=NA, key = 1,
density.info="none", trace="none",
margins = c(10,25),
dendrogram="none",
cexRow=1, cexCol=0.75)
clust.assign2 <- cutree(clustRows2, k=6)
module.color2 <- rainbow(length(unique(clust.assign2)), start=0.1, end=0.9)
# pulling these genes out along with their expression data
DiffGenes2 <- v.myDGEList.filtered.norm2$E[results2[,1] !=0 | results2[,2] !=0,]
clustRows2 <- hclust(as.dist(1-cor(t(DiffGenes2), method="pearson")), method="average")
clustColumns2 <- hclust(as.dist(1-cor(DiffGenes2, method="spearman")), method="complete")
clust.assign2 <- cutree(clustRows2, k=6)
module.color2 <- rainbow(length(unique(clust.assign2)), start=0.1, end=0.9)
module.color2 <- module.color2[as.vector(clust.assign2)]
# plotting heatmap
heatmap.2(DiffGenes2,
Rowv=as.dendrogram(clustRows2),
Colv=NA,
RowSideColors=module.color2,
col=myheatcol, scale='row',
labRow=NA, key = 1,
density.info="none", trace="none",
margins = c(10,25),
dendrogram="none",
cexRow=1, cexCol=0.75)
# competitive GSEA using CAMERA----
# first let's create a few signatures to test in our enrichment analysis
mySig <- signatures$`oxidation-reduction`[-1,]
# competitive GSEA using CAMERA----
# first let's create a few signatures to test in our enrichment analysis
mySig <- signatures$`oxidation-reduction`[-1]
mySig
# competitive GSEA using CAMERA----
# first let's create a few signatures to test in our enrichment analysis
redox.sig <- signatures$`oxidation-reduction`[-1]
meiosis.sig <- signatures$DNA_metab[-1]
carb.sig <- signatures$carb_metab[-1]
oocyst.sig <- signatures$oocyst_proteomics_20[-1]
collection <- list(redox.sig, meiosis.sig, carb.sig, oocyst.sig)
# now test for enrichment using CAMERA
GSEAres <- camera(v.myDEGList.filtered.norm$E, collection, design, contrast.matrix[,1])
# now test for enrichment using CAMERA
GSEAres <- camera(v.myDGEList.filtered.norm$E, collection, design, contrast.matrix[,1])
GSEAres <- as_tibble(GSEAres, rownames = "setName")
GSEAres <- as_tibble(GSEAres)
head(GSEAres)
contrast.matrix
GSEAres
redox.sig <- signatures$`oxidation-reduction`
redox.sig
#capturing each individual signature from above
redox.sig <- signatures$`oxidation-reduction`[-1]
meiosis.sig <- signatures$DNA_metab[-1]
carb.sig <- signatures$carb_metab[-1]
oocyst.sig <- signatures$oocyst_proteomics_20[-1]
# assembling into a gene set 'collection'
collection <- list(redox.sig, meiosis.sig, carb.sig, oocyst.sig)
# now test for enrichment using CAMERA
GSEAres <- camera(v.myDGEList.filtered.norm$E, collection, design, contrast.matrix[,1])
GSEAres <- as_tibble(GSEAres)
gt(GSEAres)
contrast.matrix
collection
# assembling into a gene set 'collection'
collection <- list(redox = redox.sig, meiosis = meiosis.sig, carb_metab = carb.sig, oocyst_proteome = oocyst.sig)
# now test for enrichment in females vs asexual using CAMERA
GSEAres <- camera(v.myDGEList.filtered.norm$E, collection, design, contrast.matrix[,1])
GSEAres <- as_tibble(GSEAres)
gt(GSEAres)
collection
# now test for enrichment in females vs asexual using CAMERA
GSEAres <- camera(v.myDGEList.filtered.norm$E, collection, design, contrast.matrix[,1])
GSEAres
GSEAres <- as_tibble(GSEAres, rownames = gene signature)
GSEAres <- as_tibble(GSEAres, rownames = 'gene signature')
gt(GSEAres)
contrast.matrix
library(rmarkdown)
library(knitr)
knitr::opts_chunk$set(echo=TRUE, warning=FALSE, message=FALSE, linewidth=60)
load("Txi_gene")
# taking only the first 12 samples in the dataset,
# which correspond to batches 2 and 3
Txi_gene <- Txi_gene$counts[,1:12]
# use EdgeR create DGEList object from counts
myDGEList <- DGEList(Txi_gene)
# use the 'cpm' function from EdgeR to get counts per million
log2.cpm <- cpm(myDGEList, log=TRUE)
log2.cpm.df <- as_tibble(log2.cpm)
colnames(log2.cpm.df) <- SampleLabels[1:12]
log2.cpm.df <- melt(log2.cpm.df)
colnames(log2.cpm.df) <- c("sample", "expression")
# plot of signal distribution for raw data
p1 <- ggplot(log2.cpm.df, aes(x=sample, y=expression, fill=sample)) +
geom_violin(trim = FALSE, show.legend = FALSE) +
stat_summary(fun.y = "median",
geom = "point",
shape = 124, size = 6,
color = "black",
show.legend = FALSE) +
labs(y="log2 expression", x = "sample") +
coord_flip() +
theme_bw()
# filtering to keep only genes that had > 10 cpm in at least 4 samples
cpm <- cpm(myDGEList)
keepers <- rowSums(cpm>10)>=4
myDGEList.filtered <- myDGEList[keepers,]
# normalize using TMM method from calnormfactors function in EdgeR package
myDGEList.filtered.norm <- calcNormFactors(myDGEList.filtered, method = "TMM")
log2.cpm.filtered.norm <- cpm(myDGEList.filtered.norm, log=TRUE)
log2.cpm.filtered.norm.df <- as_tibble(log2.cpm.filtered.norm)
colnames(log2.cpm.filtered.norm.df) <- SampleLabels[1:12]
log2.cpm.filtered.norm.df <- melt(log2.cpm.filtered.norm.df)
colnames(log2.cpm.filtered.norm.df) <- c("sample", "expression")
normData <- as_tibble(log2.cpm.filtered.norm, rownames = "geneSymbol")
colnames(normData) <- c("geneSymbol", SampleLabels[1:12])
write_tsv(normData, "normData.txt")
# plot of signal distribution again to see effect of filtering an normalization
p2 <- ggplot(log2.cpm.filtered.norm.df, aes(x=sample, y=expression, fill=sample)) +
geom_violin(trim = FALSE, show.legend = FALSE) +
stat_summary(fun.y = "median",
geom = "point",
shape = 124, size = 6,
color = "black",
show.legend = FALSE) +
labs(y="log2 expression", x = "sample") +
coord_flip() +
theme_bw()
plot_grid(p1, p2, labels = c("A", "B"))
load("Txi_gene")
# taking only the first 12 samples in the dataset,
# which correspond to batches 2 and 3
Txi_gene <- Txi_gene$counts[,1:12]
# use EdgeR create DGEList object from counts
myDGEList <- DGEList(Txi_gene)
# use the 'cpm' function from EdgeR to get counts per million
log2.cpm <- cpm(myDGEList, log=TRUE)
log2.cpm.df <- as_tibble(log2.cpm)
colnames(log2.cpm.df) <- SampleLabels[1:12]
log2.cpm.df <- melt(log2.cpm.df)
colnames(log2.cpm.df) <- c("sample", "expression")
# plot of signal distribution for raw data
p1 <- ggplot(log2.cpm.df, aes(x=sample, y=expression, fill=sample)) +
geom_violin(trim = FALSE, show.legend = FALSE) +
stat_summary(fun.y = "median",
geom = "point",
shape = 124, size = 6,
color = "black",
show.legend = FALSE) +
labs(y="log2 expression", x = "sample") +
coord_flip() +
theme_bw()
# filtering to keep only genes that had > 10 cpm in at least 4 samples
cpm <- cpm(myDGEList)
keepers <- rowSums(cpm>10)>=4
myDGEList.filtered <- myDGEList[keepers,]
# normalize using TMM method from calnormfactors function in EdgeR package
myDGEList.filtered.norm <- calcNormFactors(myDGEList.filtered, method = "TMM")
log2.cpm.filtered.norm <- cpm(myDGEList.filtered.norm, log=TRUE)
log2.cpm.filtered.norm.df <- as_tibble(log2.cpm.filtered.norm)
colnames(log2.cpm.filtered.norm.df) <- SampleLabels[1:12]
log2.cpm.filtered.norm.df <- melt(log2.cpm.filtered.norm.df)
colnames(log2.cpm.filtered.norm.df) <- c("sample", "expression")
normData <- as_tibble(log2.cpm.filtered.norm, rownames = "geneSymbol")
colnames(normData) <- c("geneSymbol", SampleLabels[1:12])
write_tsv(normData, "normData.txt")
# plot of signal distribution again to see effect of filtering an normalization
p2 <- ggplot(log2.cpm.filtered.norm.df, aes(x=sample, y=expression, fill=sample)) +
geom_violin(trim = FALSE, show.legend = FALSE) +
stat_summary(fun.y = "median",
geom = "point",
shape = 124, size = 6,
color = "black",
show.legend = FALSE) +
labs(y="log2 expression", x = "sample") +
coord_flip() +
theme_bw()
plot_grid(p1, p2, labels = c("A", "B"))
load("Txi_gene")
# taking only the first 12 samples in the dataset,
# which correspond to batches 2 and 3
Txi_gene <- Txi_gene$counts[,1:12]
# use EdgeR create DGEList object from counts
myDGEList <- DGEList(Txi_gene)
# use the 'cpm' function from EdgeR to get counts per million
log2.cpm <- cpm(myDGEList, log=TRUE)
log2.cpm.df <- as_tibble(log2.cpm)
colnames(log2.cpm.df) <- SampleLabels[1:12]
log2.cpm.df <- melt(log2.cpm.df)
colnames(log2.cpm.df) <- c("sample", "expression")
# plot of signal distribution for raw data
p1 <- ggplot(log2.cpm.df, aes(x=sample, y=expression, fill=sample)) +
geom_violin(trim = FALSE, show.legend = FALSE) +
stat_summary(fun.y = "median",
geom = "point",
shape = 124, size = 6,
color = "black",
show.legend = FALSE) +
labs(y="log2 expression", x = "sample") +
coord_flip() +
theme_bw()
# filtering to keep only genes that had > 10 cpm in at least 4 samples
cpm <- cpm(myDGEList)
keepers <- rowSums(cpm>10)>=4
myDGEList.filtered <- myDGEList[keepers,]
# normalize using TMM method from calnormfactors function in EdgeR package
myDGEList.filtered.norm <- calcNormFactors(myDGEList.filtered, method = "TMM")
log2.cpm.filtered.norm <- cpm(myDGEList.filtered.norm, log=TRUE)
log2.cpm.filtered.norm.df <- as_tibble(log2.cpm.filtered.norm)
colnames(log2.cpm.filtered.norm.df) <- SampleLabels[1:12]
log2.cpm.filtered.norm.df <- melt(log2.cpm.filtered.norm.df)
colnames(log2.cpm.filtered.norm.df) <- c("sample", "expression")
normData <- as_tibble(log2.cpm.filtered.norm, rownames = "geneSymbol")
colnames(normData) <- c("geneSymbol", SampleLabels[1:12])
write_tsv(normData, "normData.txt")
# plot of signal distribution again to see effect of filtering an normalization
p2 <- ggplot(log2.cpm.filtered.norm.df, aes(x=sample, y=expression, fill=sample)) +
geom_violin(trim = FALSE, show.legend = FALSE) +
stat_summary(fun.y = "median",
geom = "point",
shape = 124, size = 6,
color = "black",
show.legend = FALSE) +
labs(y="log2 expression", x = "sample") +
coord_flip() +
theme_bw()
plot_grid(p1, p2, labels = c("A", "B"))
load("Txi_gene")
# taking only the first 12 samples in the dataset,
# which correspond to batches 2 and 3
Txi_gene <- Txi_gene$counts[,1:12]
# use EdgeR create DGEList object from counts
myDGEList <- DGEList(Txi_gene)
# use the 'cpm' function from EdgeR to get counts per million
log2.cpm <- cpm(myDGEList, log=TRUE)
log2.cpm.df <- as_tibble(log2.cpm)
colnames(log2.cpm.df) <- SampleLabels[1:12]
log2.cpm.df <- melt(log2.cpm.df)
colnames(log2.cpm.df) <- c("sample", "expression")
# plot of signal distribution for raw data
p1 <- ggplot(log2.cpm.df, aes(x=sample, y=expression, fill=sample)) +
geom_violin(trim = FALSE, show.legend = FALSE) +
stat_summary(fun.y = "median",
geom = "point",
shape = 124, size = 6,
color = "black",
show.legend = FALSE) +
labs(y="log2 expression", x = "sample") +
coord_flip() +
theme_bw()
# filtering to keep only genes that had > 10 cpm in at least 4 samples
cpm <- cpm(myDGEList)
keepers <- rowSums(cpm>10)>=4
myDGEList.filtered <- myDGEList[keepers,]
# normalize using TMM method from calnormfactors function in EdgeR package
myDGEList.filtered.norm <- calcNormFactors(myDGEList.filtered, method = "TMM")
log2.cpm.filtered.norm <- cpm(myDGEList.filtered.norm, log=TRUE)
log2.cpm.filtered.norm.df <- as_tibble(log2.cpm.filtered.norm)
colnames(log2.cpm.filtered.norm.df) <- SampleLabels[1:12]
log2.cpm.filtered.norm.df <- melt(log2.cpm.filtered.norm.df)
colnames(log2.cpm.filtered.norm.df) <- c("sample", "expression")
normData <- as_tibble(log2.cpm.filtered.norm, rownames = "geneSymbol")
colnames(normData) <- c("geneSymbol", SampleLabels[1:12])
write_tsv(normData, "normData.txt")
# plot of signal distribution again to see effect of filtering an normalization
p2 <- ggplot(log2.cpm.filtered.norm.df, aes(x=sample, y=expression, fill=sample)) +
geom_violin(trim = FALSE, show.legend = FALSE) +
stat_summary(fun.y = "median",
geom = "point",
shape = 124, size = 6,
color = "black",
show.legend = FALSE) +
labs(y="log2 expression", x = "sample") +
coord_flip() +
theme_bw()
plot_grid(p1, p2, labels = c("A", "B"))
update.packages(ask = FALSE, checkBuilt = TRUE)
load("Txi_gene")
# taking only the first 12 samples in the dataset,
# which correspond to batches 2 and 3
Txi_gene <- Txi_gene$counts[,1:12]
# use EdgeR create DGEList object from counts
myDGEList <- DGEList(Txi_gene)
# use the 'cpm' function from EdgeR to get counts per million
log2.cpm <- cpm(myDGEList, log=TRUE)
log2.cpm.df <- as_tibble(log2.cpm)
colnames(log2.cpm.df) <- SampleLabels[1:12]
log2.cpm.df <- melt(log2.cpm.df)
colnames(log2.cpm.df) <- c("sample", "expression")
# plot of signal distribution for raw data
p1 <- ggplot(log2.cpm.df, aes(x=sample, y=expression, fill=sample)) +
geom_violin(trim = FALSE, show.legend = FALSE) +
stat_summary(fun.y = "median",
geom = "point",
shape = 124, size = 6,
color = "black",
show.legend = FALSE) +
labs(y="log2 expression", x = "sample",
title="raw data") +
coord_flip() +
theme_bw()
# filtering to keep only genes that had > 10 cpm in at least 4 samples
cpm <- cpm(myDGEList)
keepers <- rowSums(cpm>10)>=4
myDGEList.filtered <- myDGEList[keepers,]
# normalize using TMM method from calnormfactors function in EdgeR package
myDGEList.filtered.norm <- calcNormFactors(myDGEList.filtered, method = "TMM")
log2.cpm.filtered.norm <- cpm(myDGEList.filtered.norm, log=TRUE)
log2.cpm.filtered.norm.df <- as_tibble(log2.cpm.filtered.norm)
colnames(log2.cpm.filtered.norm.df) <- SampleLabels[1:12]
log2.cpm.filtered.norm.df <- melt(log2.cpm.filtered.norm.df)
colnames(log2.cpm.filtered.norm.df) <- c("sample", "expression")
normData <- as_tibble(log2.cpm.filtered.norm, rownames = "geneSymbol")
colnames(normData) <- c("geneSymbol", SampleLabels[1:12])
write_tsv(normData, "normData.txt")
# plot of signal distribution again to see effect of filtering an normalization
p2 <- ggplot(log2.cpm.filtered.norm.df, aes(x=sample, y=expression, fill=sample)) +
geom_violin(trim = FALSE, show.legend = FALSE) +
stat_summary(fun.y = "median",
geom = "point",
shape = 124, size = 6,
color = "black",
show.legend = FALSE) +
labs(y="log2 expression", x = "sample",
title="after filtering & normalization") +
coord_flip() +
theme_bw()
plot_grid(p1, p2, labels = c("A", "B"))
load("Txi_gene")
# taking only the first 12 samples in the dataset,
# which correspond to batches 2 and 3
Txi_gene <- Txi_gene$counts[,1:12]
# use EdgeR create DGEList object from counts
myDGEList <- DGEList(Txi_gene)
# use the 'cpm' function from EdgeR to get counts per million
log2.cpm <- cpm(myDGEList, log=TRUE)
log2.cpm.df <- as_tibble(log2.cpm)
colnames(log2.cpm.df) <- SampleLabels[1:12]
log2.cpm.df <- melt(log2.cpm.df)
colnames(log2.cpm.df) <- c("sample", "expression")
# plot of signal distribution for raw data
p1 <- ggplot(log2.cpm.df, aes(x=sample, y=expression, fill=sample)) +
geom_violin(trim = FALSE, show.legend = FALSE) +
stat_summary(fun.y = "median",
geom = "point",
shape = 124, size = 6,
color = "black",
show.legend = FALSE) +
labs(y="log2 expression", x = "sample",
title="raw data") +
coord_flip() +
theme_bw()
# filtering to keep only genes that had > 10 cpm in at least 4 samples
cpm <- cpm(myDGEList)
keepers <- rowSums(cpm>10)>=4
myDGEList.filtered <- myDGEList[keepers,]
# normalize using TMM method from calnormfactors function in EdgeR package
myDGEList.filtered.norm <- calcNormFactors(myDGEList.filtered, method = "TMM")
log2.cpm.filtered.norm <- cpm(myDGEList.filtered.norm, log=TRUE)
log2.cpm.filtered.norm.df <- as_tibble(log2.cpm.filtered.norm)
colnames(log2.cpm.filtered.norm.df) <- SampleLabels[1:12]
log2.cpm.filtered.norm.df <- melt(log2.cpm.filtered.norm.df)
colnames(log2.cpm.filtered.norm.df) <- c("sample", "expression")
normData <- as_tibble(log2.cpm.filtered.norm, rownames = "geneSymbol")
colnames(normData) <- c("geneSymbol", SampleLabels[1:12])
write_tsv(normData, "normData.txt")
# plot of signal distribution again to see effect of filtering an normalization
p2 <- ggplot(log2.cpm.filtered.norm.df, aes(x=sample, y=expression, fill=sample)) +
geom_violin(trim = FALSE, show.legend = FALSE) +
stat_summary(fun.y = "median",
geom = "point",
shape = 124, size = 6,
color = "black",
show.legend = FALSE) +
labs(y="log2 expression", x = "sample",
title="filtered, normalized data") +
coord_flip() +
theme_bw()
plot_grid(p1, p2, labels = c("A", "B"))
load("Txi_gene")
# taking only the last 9 samples in the dataset,
# which correspond to batch 1
Txi_gene2 <- Txi_gene$counts[,13:21]
# use EdgeR create DGEList object from counts
myDGEList2 <- DGEList(Txi_gene2)
# use the 'cpm' function from EdgeR to get counts per million
log2.cpm2 <- cpm(myDGEList2, log=TRUE)
log2.cpm.df2 <- as_tibble(log2.cpm2)
colnames(log2.cpm.df2) <- SampleLabels[13:21]
log2.cpm.df2 <- melt(log2.cpm.df2)
colnames(log2.cpm.df2) <- c("sample", "expression")
# plot of signal distribution for raw data
p1 <- ggplot(log2.cpm.df2, aes(x=sample, y=expression, fill=sample)) +
geom_violin(trim = FALSE, show.legend = FALSE) +
stat_summary(fun.y = "median",
geom = "point",
shape = 124, size = 6,
color = "black",
show.legend = FALSE) +
labs(y="log2 expression", x = "sample",
title = "raw data") +
coord_flip() +
theme_bw()
# filtering to keep only genes that had > 10 cpm in at least 3 samples
cpm2 <- cpm(myDGEList2)
keepers2 <- rowSums(cpm2>10)>=3
myDGEList.filtered2 <- myDGEList2[keepers2,]
# normalize using TMM method from calnormfactors function in EdgeR package
myDGEList.filtered.norm2 <- calcNormFactors(myDGEList.filtered2, method = "TMM")
log2.cpm.filtered.norm2 <- cpm(myDGEList.filtered.norm2, log=TRUE)
log2.cpm.filtered.norm.df2 <- as_tibble(log2.cpm.filtered.norm2)
colnames(log2.cpm.filtered.norm.df2) <- SampleLabels[13:21]
log2.cpm.filtered.norm.df2 <- melt(log2.cpm.filtered.norm.df2)
colnames(log2.cpm.filtered.norm.df2) <- c("sample", "expression")
normData2 <- as_tibble(log2.cpm.filtered.norm2, rownames = "geneSymbol")
colnames(normData2) <- c("geneSymbol", SampleLabels[13:21])
write_tsv(normData2, "normData2.txt")
# plot of signal distribution again to see effect of filtering an normalization
p2 <- ggplot(log2.cpm.filtered.norm.df2, aes(x=sample, y=expression, fill=sample)) +
geom_violin(trim = FALSE, show.legend = FALSE) +
stat_summary(fun.y = "median",
geom = "point",
shape = 124, size = 6,
color = "black",
show.legend = FALSE) +
labs(y="log2 expression", x = "sample",
title = "filtered, normalized data") +
coord_flip() +
theme_bw()
plot_grid(p1, p2, labels = c("A", "B"))
rmarkdown::pandoc_version()
rmarkdown::pandoc_version()
